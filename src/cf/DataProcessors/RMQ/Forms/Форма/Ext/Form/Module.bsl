&НаКлиенте
Перем Клиент, АдресВоВременномХранилище;

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	//пример для бесплатного https://www.cloudamqp.com/
	
	//Адрес = "flamingo-01.rmq.cloudamqp.com";
	//Порт = 5672;
	//Логин = "dcyuszes";
	//Пароль = "n1ka_691bexu6e27hhqrKUgwBuvJkxx";
	//ВиртуальныйХост = "dcyuszes"; 
	
	сНастройки = ПолучитьНастройки();
	Если ЗначениеЗаполнено(сНастройки) Тогда 
		ТочкаОбмена = сНастройки.ТочкаОбмена;
		ИмяОчереди = сНастройки.ИмяОчереди;
		КлючМаршрутизации = сНастройки.КлючМаршрутизации;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьНастройки()
	Настройка = Константы.мвв_ТекущиеНастройкиRMQ.Получить();
	сНастройки = Новый Структура();
	сНастройки.Вставить("ТочкаОбмена", Настройка.ТочкаОбмена);
	сНастройки.Вставить("ИмяОчереди", Настройка.ИмяОчереди);
	сНастройки.Вставить("КлючМаршрутизации", Настройка.КлючМаршрутизации);
	Возврат сНастройки;
КонецФункции

#Область ПодключениеИнициализацияКомпоненты

&НаКлиенте
Процедура ПодключитьКомпонентуКлиент(КомпонентаПодключена = Неопределено)
	
	АдресВоВременномХранилище = ПолучитьАдресМакетаКомпановкиНаСервере(ЭтаФорма.УникальныйИдентификатор);
	
	УстановитьВнешнююКомпоненту(АдресВоВременномХранилище);
	КомпонентаПодключена = ПодключитьВнешнююКомпоненту(
			АдресВоВременномХранилище,
			"BITERP",
			ТипВнешнейКомпоненты.Native);
	Сообщить(НСтр("ru = 'Компонента подключена!'"));
КонецПроцедуры

&НаСервере
Процедура ПодключитьКомпонентуСервер(КомпонентаПодключена = Неопределено)
	
	АдресВоВременномХранилище = ПолучитьАдресМакетаКомпановкиНаСервере(ЭтаФорма.УникальныйИдентификатор);
	КомпонентаПодключена = ПодключитьВнешнююКомпоненту(
			АдресВоВременномХранилище,
			"BITERP",
			ТипВнешнейКомпоненты.Native);
	Сообщить(НСтр("ru = 'Компонента подключена!'"));
КонецПроцедуры

&НаКлиенте
Функция ПолучитьКомпонентуКлиент()
	
	Если Клиент = Неопределено Тогда
		Если Не ИнициализироватьКомпонентуКлиентСервер(Клиент) Тогда
			
			ПодключитьКомпонентуКлиент();
			ИнициализироватьКомпонентуКлиентСервер(Клиент);
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат Клиент;
КонецФункции

&НаСервере
Функция ПолучитьКомпонентуСервер()
	
	КлиентКомпоненты = Неопределено;
	Если Не ИнициализироватьКомпонентуКлиентСервер(КлиентКомпоненты) Тогда
		
		ПодключитьКомпонентуСервер();
		ИнициализироватьКомпонентуКлиентСервер(КлиентКомпоненты);
		
	КонецЕсли;
	
	Возврат КлиентКомпоненты;
КонецФункции

#КонецОбласти

&НаКлиенте
Процедура СозданиеТочкиИОчереди(Команда)
	
	Если ИспользоватьКомпоненту = 0 Тогда
		СозданиеТочкиИОчередиКлиент();
	ИначеЕсли ИспользоватьКомпоненту = 1 Тогда
		СозданиеТочкиИОчередиСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СозданиеТочкиИОчередиКлиент()
	
	КлиентКомпоненты = ПолучитьКомпонентуКлиент();
	СозданиеТочкиИОчередиКлиентСервер(КлиентКомпоненты, Этаформа);
	
КонецПроцедуры

&НаСервере
Процедура СозданиеТочкиИОчередиСервер()
	
	КлиентКомпоненты = ПолучитьКомпонентуСервер();
	СозданиеТочкиИОчередиКлиентСервер(КлиентКомпоненты, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьСообщение(Команда)
	
	Если ИспользоватьКомпоненту = 0 Тогда
		ОтправитьСообщениеКлиент();
	ИначеЕсли ИспользоватьКомпоненту = 1 Тогда
		ОтправитьСообщениеСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьСообщениеКлиент()
	
	КлиентКомпоненты = ПолучитьКомпонентуКлиент();
	ОтправитьСообщениеКлиентСервер(КлиентКомпоненты, ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ОтправитьСообщениеСервер()
	
	КлиентКомпоненты = ПолучитьКомпонентуСервер();
	ОтправитьСообщениеКлиентСервер(КлиентКомпоненты, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьСообщение(Команда)
	
	Если ИспользоватьКомпоненту = 0 Тогда
		ПрочитатьСообщениеКлиент();
	ИначеЕсли ИспользоватьКомпоненту = 1 Тогда
		ПрочитатьСообщениеСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьСообщениеКлиент()
	
	КлиентКомпоненты = ПолучитьКомпонентуКлиент();
	ПрочитатьСообщениеКлиентСервер(КлиентКомпоненты, ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьСообщениеСервер()
	
	КлиентКомпоненты = ПолучитьКомпонентуСервер();
	ПрочитатьСообщениеКлиентСервер(КлиентКомпоненты, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПодключение(Команда)
	
	Если ИспользоватьКомпоненту = 0 Тогда
		ПроверитьПодключениеКлиент();
	ИначеЕсли ИспользоватьКомпоненту = 1 Тогда
		ПроверитьПодключениеСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПодключениеКлиент()
	
	КлиентКомпоненты = ПолучитьКомпонентуКлиент();
	ПроверитьПодключениеКлиентСервер(КлиентКомпоненты, ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьПодключениеСервер()
	
	КлиентКомпоненты = ПолучитьКомпонентуСервер();
	ПроверитьПодключениеКлиентСервер(КлиентКомпоненты, ЭтаФорма);
	
КонецПроцедуры

#Область СлужебныеПроцедуры

&НаСервере
Функция ПолучитьАдресМакетаКомпановкиНаСервере(УникальныйИдентификатор)
	
	МакетВнешнейКомпоненты    = РеквизитФормыВЗначение("Объект").ПолучитьМакет("ВнешняяКомпонента");
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(МакетВнешнейКомпоненты, УникальныйИдентификатор);
	
	Возврат АдресВоВременномХранилище;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИнициализироватьКомпонентуКлиентСервер(Компонента)
	
	Попытка
		Компонента  = Новый("AddIn.BITERP.PinkRabbitMQ");
		Возврат Истина;
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

#КонецОбласти

#Область ПроцедурыРаботаСRabbitMQ

&НаКлиентеНаСервереБезКонтекста
Процедура ПроверитьПодключениеКлиентСервер(КлиентКомпоненты, Форма)
	
	Попытка
		КлиентКомпоненты.Connect(
				Форма.Адрес,
				Форма.Порт,
				Форма.Логин,
				Форма.Пароль,
				Форма.ВиртуальныйХост);
	Исключение
		СистемнаяОшибка = ОписаниеОшибки();
		ТекстСообщения = "Ошибка подключения!%СистемнаяОшибка%";
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СистемнаяОшибка%", СистемнаяОшибка);
		#Если Сервер Тогда
			ЗаписьЖурналаРегистрации("Обмен с офисом", УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
		#Иначе
			Сообщить(ТекстСообщения);	
		#КОнецЕсли	
	КонецПопытки;
	
	Сообщить(НСтр("ru = 'Подключение успешно выполнено!'"));
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СозданиеТочкиИОчередиКлиентСервер(КлиентКомпоненты, Форма)
	
	Попытка
		КлиентКомпоненты.Connect(
			Форма.Адрес,
			Форма.Порт,
			Форма.Логин,
			Форма.Пароль,
			Форма.ВиртуальныйХост);
			
		ТочкаОбмена = Форма.ТочкаОбмена;
		ИмяОчереди  = Форма.ИмяОчереди;
		
		КлиентКомпоненты.DeclareExchange(ТочкаОбмена, "topic", Ложь, Истина, Ложь);
		КлиентКомпоненты.DeclareQueue(ИмяОчереди, Ложь, Ложь, Ложь, Ложь);
		КлиентКомпоненты.BindQueue(ИмяОчереди, ТочкаОбмена, "#" + ИмяОчереди + "#");
	Исключение
		СистемнаяОшибка = ОписаниеОшибки();
		ТекстСообщения = "Ошибка создания точек и очередей!%СистемнаяОшибка%";
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СистемнаяОшибка%", СистемнаяОшибка);
		ВызватьИсключение ТекстСообщения;
	КонецПопытки;
	
	Сообщить("Точки и очереди успешно созданы!");
КонецПроцедуры

&НаСервере
Функция ПолучитьТекстСообщения(Документ)
	Сериализатор = Новый СериализаторXDTO(ФабрикаXDTO);
	Запись = Новый ЗаписьJSON;
	Запись.УстановитьСтроку();
	Сериализатор.ЗаписатьJSON(Запись, Документ.ПолучитьОбъект(), НазначениеТипаXML.Явное);
	ТекстСообщения = Запись.Закрыть();
	
	Возврат ТекстСообщения;
КонецФункции

&НаСервере
Процедура ОтправитьСообщениеКлиентСервер(КлиентКомпоненты, Форма)
	
	Попытка
		КлиентКомпоненты.Connect(
			Форма.Адрес,
			Форма.Порт,
			Форма.Логин,
			Форма.Пароль,
			Форма.ВиртуальныйХост);
		
		ТочкаОбмена    = Форма.ТочкаОбмена;
		ИмяОчереди     = Форма.ИмяОчереди;
		ТекстСообщения = Форма.ТекстСообщения;
		КлючМаршрутизации = Форма.КлючМаршрутизации;  
		
		тзСообщенияДляОтправки = РеквизитФормыВЗначение("СообщенияДляОтправки");
		
		Для каждого тСтрока ИЗ тзСообщенияДляОтправки Цикл
			ТекстСообщения = ПолучитьТекстСообщения(тСтрока.Документ);
		
		
			КлиентКомпоненты.BasicPublish(
				ТочкаОбмена,
				КлючМаршрутизации,
				ТекстСообщения,
				1,
				Ложь);
				
			сЗапись = РегистрыСведений.мвв_СообщенияДляОтправки.СоздатьМенеджерЗаписи();
			сЗапись.Период = тСтрока.Период;
			сЗапись.Документ = тСтрока.Документ;
			сЗапись.ДокументОтправлен = ИСТИНА;
			сЗапись.Сообщение = "";
			сЗапись.Записать(ИСТИНА);  
		КонецЦикла;	
	Исключение
		СистемнаяОшибка = ОписаниеОшибки();
		ТекстСообщения = "Ошибка отправки сообщения!%СистемнаяОшибка%";
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СистемнаяОшибка%", СистемнаяОшибка); 
		сЗапись = РегистрыСведений.мвв_СообщенияДляОтправки.СоздатьМенеджерЗаписи();
		сЗапись.Период = тСтрока.Период;
		сЗапись.Документ = тСтрока.Документ;
		сЗапись.ДокументОтправлен = ЛОЖЬ;
		сЗапись.Сообщение = ТекстСообщения;
		сЗапись.Записать(ИСТИНА);
		
	КонецПопытки;
	
	Сообщить("Сообщение успешно отправлено!");
КонецПроцедуры 

&НаСервереБезКонтекста
Функция ПолучитьДанныеДляСообщения(ТекстСообщения, Форма)
	тзСообщенияДляОтправки = ДанныеФормыВЗначение(Форма.СообщенияДляОтправки, Тип("ТаблицаЗначений"));
	тНовСтрока = тзСообщенияДляОтправки.Добавить();
	тНовСТрока.Сообщение = ТекстСообщения;
	//Сериализатор = Новый СериализаторXDTO(ФабрикаXDTO);
	//Чтение = Новый ЧтениеJSON();
	//Чтение.УстановитьСтроку(ТекстСообщения);	
	//Попытка                                 
	//	Об = Сериализатор.ПрочитатьJSON(Чтение);
	//	Об.Записать();
	//	тНовСтрока.Документ = Об.Ссылка;
	//Исключение
	//	Сообщить(ОписаниеОшибки());
	//КонецПопытки 
	ЗначениеВДанныеФормы(тзСообщенияДляОтправки, Форма.СообщенияДляОтправки);
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ПрочитатьСообщениеКлиентСервер(КлиентКомпоненты, Форма)
	
	Попытка
		КлиентКомпоненты.Connect(
			Форма.Адрес,
			Форма.Порт,
			Форма.Логин,
			Форма.Пароль,
			Форма.ВиртуальныйХост);
		
		ИмяОчереди = Форма.ИмяОчереди;
		
			
		Попытка
			//КлиентКомпоненты.DeclareQueue(ИмяОчереди, Ложь, Ложь, Ложь, Ложь);
			
			Потребитель = КлиентКомпоненты.BasicConsume(ИмяОчереди, "", Истина, Ложь, 0);
			
			ОтветноеСообщение = "";
			Пока КлиентКомпоненты.BasicConsumeMessage("", ОтветноеСообщение, 5) Цикл
				сДокумент = ПолучитьДанныеДляСообщения(ОтветноеСообщение, Форма);
				КлиентКомпоненты.BasicAck();
				Форма.ОтветноеСообщение = ОтветноеСообщение;
				ТекстСообщения = НСтр("ru='Сообщение успешно прочитано!'");
			КонецЦикла;
			Сообщить(ТекстСообщения);
			
			КлиентКомпоненты.BasicCancel("");
		Исключение
			ВызватьИсключение КлиентКомпоненты.GetLastError();
		КонецПопытки;
	Исключение
		СистемнаяОшибка = ОписаниеОшибки();
		ТекстСообщения = "Ошибка чтения сообщения!%СистемнаяОшибка%";
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СистемнаяОшибка%", СистемнаяОшибка);
		ВызватьИсключение ТекстСообщения;
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура кнПолучитьДокументыДляОтправкиНаСервере()
	СообщенияДляОтправки.Очистить();
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 100
					|	мвв_СообщенияДляОтправкиСрезПоследних.Период КАК Период,
	               |	мвв_СообщенияДляОтправкиСрезПоследних.Документ КАК Документ,
	               |	мвв_СообщенияДляОтправкиСрезПоследних.ДокументОтправлен КАК ДокументОтправлен,
	               |	мвв_СообщенияДляОтправкиСрезПоследних.Сообщение КАК Сообщение
	               |ИЗ
	               |	РегистрСведений.мвв_СообщенияДляОтправки.СрезПоследних(, НЕ ДокументОтправлен) КАК мвв_СообщенияДляОтправкиСрезПоследних"; 
	СообщенияДляОтправки.Загрузить(Запрос.Выполнить().Выгрузить());
КонецПроцедуры

&НаКлиенте
Процедура кнПолучитьДокументыДляОтправки(Команда)
	кнПолучитьДокументыДляОтправкиНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Настройки = Константы.мвв_ТекущиеНастройкиRMQ.Получить();
	Если НЕ ЗначениеЗаполнено(Настройки) Тогда
		ОбщегоНазначения.СообщитьПользователю("Не настроены данные для подключения RMQ");
		Откраз = ИСТИНА;
		Возврат;
	КонецЕсли;
	
	ЭтаФОрма.Адрес 	= Настройки.АдресСервера;
	ЭтаФОрма.Порт	= Настройки.Порт;
	ЭтаФОрма.Логин	= Настройки.Логин;
	ЭтаФОрма.Пароль	= Настройки.Пароль;
	ЭтаФОрма.ВиртуальныйХост	= Настройки.ВиртуальныйХост;
	ЭтаФОрма.ИмяОчереди		= Настройки.ИмяОчереди;
	ЭтаФОрма.ТочкаОбмена	= Настройки.ТочкаОбмена;
КонецПроцедуры

&НаСервере
Процедура кнСоздатьДокументыНаСервере()
	тзДанные = РеквизитФормыВЗначение("СообщенияДляОтправки");
	Для каждого тСтрока ИЗ тзДанные Цикл
		Сериализатор = Новый СериализаторXDTO(ФабрикаXDTO);
		Чтение = Новый ЧтениеJSON();
		Чтение.УстановитьСтроку(тСтрока.Сообщение);	
		Попытка                                 
			Об = Сериализатор.ПрочитатьJSON(Чтение);
			Об.Записать();
			тСтрока.Документ = Об.Ссылка;
			тСтрока.ДокументОтправлен = ИСТИНА;
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки	
	КонецЦикла;
	ЗначениеВРеквизитФормы(тзДанные, "СообщенияДляОтправки");
КонецПроцедуры

&НаКлиенте
Процедура кнСоздатьДокументы(Команда)
	кнСоздатьДокументыНаСервере();
КонецПроцедуры

#КонецОбласти

